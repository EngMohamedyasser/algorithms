/* 

                              *************************** Majority Element challenge **************************************************


Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109


                            *********************************** Check the answer below in C Lanuage ****************************************************

*/

int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}


int majorityElement(int* nums, int numsSize) {
  qsort(nums, numsSize, sizeof(int), compare); // used the sort to arrange the elements

    return nums[numsSize/2];  // picked the element in the middle 
  }



